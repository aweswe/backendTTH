import { Injectable } from '@nestjs/common';
import { PDFDocument } from 'pdfkit';
import { ConfigService } from '@nestjs/config';
import { Itinerary } from '@prisma/client';

@Injectable()
export class PdfService {
  constructor(private configService: ConfigService) {}

  async generateItineraryPdf(itinerary: Itinerary, theme?: string): Promise<Buffer> {
    return new Promise((resolve, reject) => {
      const doc = new PDFDocument({
        size: 'A4',
        margin: 50,
      });

      const chunks: Buffer[] = [];
      doc.on('data', (chunk) => chunks.push(chunk));
      doc.on('end', () => resolve(Buffer.concat(chunks)));
      doc.on('error', reject);

      // Add header
      doc
        .fontSize(25)
        .text(itinerary.title, { align: 'center' })
        .moveDown();

      // Add description
      doc
        .fontSize(12)
        .text(itinerary.description)
        .moveDown();

      // Add date range
      doc
        .fontSize(14)
        .text(
          `From: ${itinerary.startDate.toLocaleDateString()} To: ${itinerary.endDate.toLocaleDateString()}`,
        )
        .moveDown();

      // Add activities
      doc.fontSize(16).text('Activities:').moveDown();

      itinerary.activities.forEach((activity) => {
        doc
          .fontSize(14)
          .text(activity.name)
          .fontSize(12)
          .text(`Description: ${activity.description}`)
          .text(`Location: ${activity.location}`)
          .text(
            `Time: ${activity.startTime.toLocaleTimeString()} - ${activity.endTime.toLocaleTimeString()}`,
          );

        if (activity.cost) {
          doc.text(`Cost: $${activity.cost}`);
        }

        doc.moveDown();
      });

      // Add footer
      const footerY = doc.page.height - 50;
      doc
        .fontSize(10)
        .text(
          'Generated by TTH Itinerary System',
          doc.page.width / 2,
          footerY,
          { align: 'center' },
        );

      doc.end();
    });
  }
} 