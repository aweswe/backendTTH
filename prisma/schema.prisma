// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL") 
  directUrl  = env("DATABASE_URL")
  extensions = []
}

enum UserRole {
  ADMIN
  USER
  CUSTOMER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum NotificationType {
  LEAD_ASSIGNED
  ITINERARY_CREATED
  ITINERARY_UPDATED
  TASK_DUE
  SYSTEM
}

enum CommunicationType {
  EMAIL
  WHATSAPP
}

enum CommunicationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
  READ
}

enum SyncStatus {
  PENDING
  SYNCED
  FAILED
  CONFLICT
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String?
  lastName      String?
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastLogin     DateTime?
  isActive      Boolean       @default(true)
  
  // Relations
  leads         Lead[]        @relation("AssignedLeads")
  notes         Note[]
  notifications Notification[]
  pdfThemes     PdfTheme[]
  templates     CommunicationTemplate[]
  messages      Message[]
  offlineOps    OfflineOperation[]
  syncLogs      SyncLog[]
  itineraries   Itinerary[]
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String[]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lead {
  id            String      @id @default(uuid())
  firstName     String
  lastName      String
  email         String
  phone         String?
  company       String?
  status        LeadStatus  @default(NEW)
  source        String?
  notes         Note[]
  messages      Message[]
  assignedTo    String
  assignedUser  User        @relation("AssignedLeads", fields: [assignedTo], references: [id])
  userId        String
  itinerary     Itinerary?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lastContacted DateTime?
  aiSummary     String?
}

model Note {
  id        String   @id @default(uuid())
  content   String
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PdfTheme {
  id           String    @id @default(uuid())
  name         String    @unique
  primaryColor String
  fontFamily   String
  fontSize     Int
  createdBy    String
  user         User      @relation(fields: [createdBy], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Itinerary {
  id           String    @id @default(uuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  lead        Lead        @relation(fields: [leadId], references: [id])
  leadId      String      @unique
  createdBy   User        @relation(fields: [userId], references: [id])
  userId      String
  activities  Activity[]
  feedback    Feedback[]
  status      String      @default("draft")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Activity {
  id          String    @id @default(uuid())
  name        String
  description String?
  location    String?
  startTime   DateTime
  endTime     DateTime
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id])
  itineraryId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CommunicationTemplate {
  id          String    @id @default(uuid())
  name        String
  type        CommunicationType
  subject     String?
  content     String
  variables   Json?
  createdBy   String
  user        User      @relation(fields: [createdBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
}

model Message {
  id          String             @id @default(uuid())
  type        CommunicationType
  status      CommunicationStatus
  recipient   String
  subject     String?
  content     String
  metadata    Json?
  templateId  String?
  template    CommunicationTemplate? @relation(fields: [templateId], references: [id])
  leadId      String?
  lead        Lead?              @relation(fields: [leadId], references: [id])
  createdBy   String
  user        User               @relation(fields: [createdBy], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  scheduledFor DateTime?
}

model OfflineOperation {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  modelName   String
  recordId    String
  operation   String
  data        Json
  status      SyncStatus  @default(PENDING)
  error       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  syncedAt    DateTime?
}

model SyncLog {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  deviceId    String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  status      String
  details     Json?
}

model AnalyticsEvent {
  id        String   @id @default(uuid())
  type      String
  data      Json
  createdAt DateTime @default(now())
}

model AiError {
  id            String   @id @default(uuid())
  timestamp     DateTime @default(now())
  errorType     String
  endpoint      String
  modelName     String
  errorMessage  String
  stackTrace    String?  @db.Text
  inputPreview  String?
  status        Int?
  resolved      Boolean  @default(false)
  createdAt     DateTime @default(now())
}

model Feedback {
  id          String    @id @default(uuid())
  content     String
  rating      Int
  itineraryId String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id])
  customerId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([itineraryId])
  @@index([customerId])
} 