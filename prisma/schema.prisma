// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserRole {
  ADMIN
  USER
  CUSTOMER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum NotificationType {
  ITINERARY_UPDATE
  DOCUMENT_PROCESSED
  FEEDBACK_RECEIVED
  SYSTEM
  OTHER
}

enum CommunicationType {
  EMAIL
  WHATSAPP
}

enum CommunicationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
  READ
}

enum SyncStatus {
  PENDING
  SYNCED
  FAILED
  CONFLICT
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole      @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastLogin     DateTime?
  isActive      Boolean       @default(true)
  
  // Relations
  leads         Lead[]        @relation("AssignedLeads")
  notes         Note[]
  notifications Notification[]
  pdfThemes     PdfTheme[]
  templates     CommunicationTemplate[]
  messages      Message[]
  offlineOps    OfflineOperation[]
  syncLogs      SyncLog[]
  itineraries   Itinerary[]
}

model Lead {
  id            String      @id @default(uuid())
  firstName     String
  lastName      String
  email         String
  phone         String?
  company       String?
  status        LeadStatus  @default(NEW)
  source        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  assignedTo    String
  assignedUser  User        @relation("AssignedLeads", fields: [assignedTo], references: [id])
  notes         Note[]
  messages      Message[]
  lastContacted DateTime?
  aiSummary     String?
}

model Note {
  id        String   @id @default(uuid())
  content   String
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PdfTheme {
  id          String    @id @default(uuid())
  name        String
  description String?
  config      Json
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String
  user        User      @relation(fields: [createdBy], references: [id])
  itineraries Itinerary[]
}

model Itinerary {
  id           String    @id @default(uuid())
  title        String
  description  String?
  status       String
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  themeId      String?
  theme        PdfTheme? @relation(fields: [themeId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  approvedAt   DateTime?
  customerId   String?
}

model CommunicationTemplate {
  id          String    @id @default(uuid())
  name        String
  type        CommunicationType
  subject     String?
  content     String
  variables   Json?
  createdBy   String
  user        User      @relation(fields: [createdBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
}

model Message {
  id          String             @id @default(uuid())
  type        CommunicationType
  status      CommunicationStatus
  recipient   String
  subject     String?
  content     String
  metadata    Json?
  templateId  String?
  template    CommunicationTemplate? @relation(fields: [templateId], references: [id])
  leadId      String?
  lead        Lead?              @relation(fields: [leadId], references: [id])
  createdBy   String
  user        User               @relation(fields: [createdBy], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  scheduledFor DateTime?
}

model OfflineOperation {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  modelName   String
  recordId    String
  operation   String
  data        Json
  status      SyncStatus  @default(PENDING)
  error       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  syncedAt    DateTime?
}

model SyncLog {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  deviceId    String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  status      String
  details     Json?
} 